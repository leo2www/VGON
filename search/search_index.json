{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"VGON Environment Setup","text":"<p>VGON scripts here require Python version 3.11 and above.</p> <p>This guide provides instructions for setting up the VGON (Variational Generative Optimization Network) environment using either <code>uv</code> or <code>pip</code>.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>Git</li> </ul>"},{"location":"#method-1-using-uv-recommended","title":"Method 1: Using uv (Recommended)","text":"<p>uv is a fast Python package manager and project manager, whose installation is simple as guide</p>"},{"location":"#setup-with-uv","title":"Setup with uv","text":"<ol> <li>Clone the repository to local disk.     <pre><code>git clone https://github.com/zhangjianjianzz/VGON.git &amp;&amp; cd VGON\n</code></pre></li> <li> <p>Create virtual environment if it wasn't contained     <pre><code>uv venv .venv\n</code></pre>     The python virtual environment will be located at <code>.venv</code> fold under root path in default. Linux/macOS users could activate it in shell by typing     <pre><code>source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install dependecies in <code>.venv</code> for VGON scripts      <pre><code>uv sync --extra all\n</code></pre> <code>plot</code> and <code>notebook</code> groups are optional for VGON itself. </p> </li> <li> <p>Running experiments with uv     <pre><code># Run specific experiments\nuv run python BP/HXXZ/vgon_xxz.py\nuv run python Gap/Mix.py\nuv run python Degeneracy/H232/H232.py\n\n# Or activate environment first\nsource .venv/bin/activate\npython BP/HXXZ/plot.py\n</code></pre></p> </li> </ol>"},{"location":"#method-2-using-pip","title":"Method 2: Using pip","text":""},{"location":"#setup-with-pip","title":"Setup with pip","text":"<pre><code># Clone the repository\ngit clone &lt;your-repo-url&gt;\ncd VGON\n\n# Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\nsource venv/bin/activate  # On Linux/macOS\n# or\nvenv\\Scripts\\activate     # On Windows\n\n# Upgrade pip\npip install --upgrade pip\n\n# Install PyTorch (CPU version)\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\n\n# For GPU support (CUDA 12.1), use instead:\n# pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121\n\n# Install the package with dependencies\npip install -e .\n\n# Install optional dependencies\npip install -e \".[plot]\"     # For plotting\npip install -e \".[dev]\"      # For development\npip install -e \".[gpu]\"      # For GPU acceleration\npip install -e \".[all]\"      # Install everything\n\n# Manual installation of ptitprince (if needed)\npip install git+https://github.com/pog87/PtitPrince.git\n</code></pre>"},{"location":"#verify-installation","title":"Verify Installation","text":"<p>Test your installation by running a simple example:</p> <pre><code>import torch\nimport pennylane as qml\nimport numpy as np\n\n# Test basic functionality\nprint(f\"PyTorch version: {torch.__version__}\")\nprint(f\"PennyLane version: {qml.__version__}\")\nprint(f\"CUDA available: {torch.cuda.is_available()}\")\n\n# Test quantum device\ndev = qml.device(\"default.qubit\", wires=2)\nprint(\"\u2713 PennyLane quantum device created successfully\")\n</code></pre>"},{"location":"#project-structure","title":"Project Structure","text":"<pre><code>VGON/\n\u251c\u2500\u2500 BP/              # Barren Plateau experiments\n\u2502   \u251c\u2500\u2500 HXXZ/        # Heisenberg XXZ model\n\u2502   \u2514\u2500\u2500 Z1Z2/        # Z1Z2 model\n\u251c\u2500\u2500 Degeneracy/      # Degeneracy detection experiments\n\u2502   \u251c\u2500\u2500 H232/        # H232 Hamiltonian\n\u2502   \u2514\u2500\u2500 MG/          # Graph states\n\u251c\u2500\u2500 Gap/             # Nonlocality gap experiments\n\u2514\u2500\u2500 results/         # Experimental results\n</code></pre>"},{"location":"#running-experiments","title":"Running Experiments","text":""},{"location":"#barren-plateau-experiments","title":"Barren Plateau Experiments","text":"<pre><code># HXXZ model\npython BP/HXXZ/vgon_xxz.py    # Run VGON training\npython BP/HXXZ/vqe_xxz.py     # Run VQE baseline\npython BP/HXXZ/plot.py        # Generate plots\n\n# Z1Z2 model\npython BP/Z1Z2/vgon_z1z2.py\npython BP/Z1Z2/vqe_z1z2.py\npython BP/Z1Z2/plot.py\n</code></pre>"},{"location":"#degeneracy-detection","title":"Degeneracy Detection","text":"<pre><code># H232 Hamiltonian\npython Degeneracy/H232/H232.py\npython Degeneracy/H232/plot.py\n\n# Graph states\npython Degeneracy/MG/MG.py\npython Degeneracy/MG/plot.py\n</code></pre>"},{"location":"#nonlocality-gap","title":"Nonlocality Gap","text":"<pre><code>python Gap/Mix.py              # Train gap model\nmatlab -batch \"run('Gap/plotGap.m')\"  # Generate MATLAB plots\n</code></pre>"},{"location":"#troubleshooting","title":"Troubleshooting","text":""},{"location":"#common-issues","title":"Common Issues","text":"<ol> <li>CUDA not found: If you have a GPU but CUDA is not detected, reinstall PyTorch with CUDA support</li> <li>PennyLane device errors: Ensure you have the correct PennyLane plugins installed</li> <li>Memory issues: Reduce batch sizes in the configuration files</li> <li>Import errors: Make sure all dependencies are installed correctly</li> </ol>"},{"location":"#gpu-setup","title":"GPU Setup","text":"<p>For GPU acceleration:</p>"},{"location":"#development-setup","title":"Development Setup","text":"<p>For contributors:</p>"},{"location":"#support","title":"Support","text":"<ul> <li>Paper: Commun Phys 8, 334 (2025)</li> <li>Issues: Create an issue on the GitHub repository</li> <li>Documentation: See individual module docstrings and comments</li> </ul>"},{"location":"#development-containers","title":"Development Containers","text":"<p>DevContainers' configuration in vscode/GitHub Codespace.</p>"},{"location":"SUMMARY/","title":"Summary","text":"<ul> <li>Installation</li> </ul>"}]}